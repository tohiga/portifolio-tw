{
  "translation": {
    "Home": "início",
    "Work": "Experiência",
    "Stack": "Tecnologias",
    "More": "Mais",
    "Contact": "Contato",
    "Send": "Enviar",
    "Sending": "Enviando...",
    "HeroTitle": "projeto bem legal feito por um",
    "HeroSubtitle": "Usando Tecnologias Incríveis.",
    "GetStarted": "Vamos lá",
    "WhatIveDone": "O Que Fiz Até Agora",
    "MyExperience": "Minha Experiência",
    "MyStack": "Tecnologias",
    "SomeTechnologies": "Algumas Tecnologias que Tenho Experiência",
    "ILikeToListen": "Coisas Que Gosto de Ouvir Enquanto Codo",
    "MyPlaylists": "Minhas Playlists",
    "ContactMe": "Fale Comigo",
    "GetInTouch": "Entre Em Contato",
    "YourName": "Seu Nome",
    "YourEmail": "Seu Email",
    "Message": "Mensagem",
    "MaxNameError": "Nome deve conter no máximo 50 caracteres",
    "MinNameError": "Nome deve conter no mínimo 2 caracteres",
    "MessageError": "Mensagem deve conter pelo menos 5 caracteres",
    "EmailError": "Email Inválido",
    "Reactjs": "O React foi uma peça fundamental em minha jornada como programador, sendo amplamente utilizado em diversos projetos. Com essa biblioteca, criei interfaces de usuário interativas e reativas, proporcionando uma experiência de usuário eficiente e agradável. A modularidade dos componentes React permitiu reutilizar código e garantir a consistência em todo o código-base.",
    "Tailwind": "Neste projeto atual que você está vendo, optei pelo Tailwind CSS para otimizar a estilização das interfaces. A abordagem utilitária do Tailwind agilizou o processo de desenvolvimento, me permitindo criar estilos personalizados de forma ágil através da combinação de classes utilitárias. A responsividade embutida facilitou a construção de layouts que se adaptam perfeitamente em diferentes dispositivos e tamanhos de tela.",
    "Nextjs": "Aplicado em diversos projetos anteriores, tanto em versões pré-13 quanto posteriores, a adoção do Next.js resultou em benefícios significativos. A renderização no lado do servidor (SSR) melhorou o desempenho das aplicações, uma vez que as páginas são pré-renderizadas, proporcionando um carregamento mais rápido e uma melhor experiência para os usuários. Além disso, a simplicidade do sistema de roteamento do Next.js acelerou o desenvolvimento e a manutenção dos projetos.",
    "Typescript": "A incorporação do TypeScript nos meus projetos trouxe ganhos em segurança e legibilidade. A tipagem estática ajudou a evitar erros comuns durante o desenvolvimento, tornando o código mais confiável e fácil de manter. Com a capacidade de definir tipos para variáveis, parâmetros de função e retornos, obtive uma visão clara das estruturas de dados, facilitando a colaboração em equipe.",
    "Nodejs": "Node.js foi essencial para o desenvolvimento de APIs robustas e escaláveis. Com o Node.js, pude criar servidores altamente performáticos e assíncronos, garantindo que as aplicações respondam rapidamente às solicitações dos usuários. A capacidade de trabalhar com JavaScript tanto no frontend quanto no backend simplificou a comunicação e a sincronia entre as camadas da aplicação.",
    "AWS": "A AWS foi amplamente utilizada em diversos projetos para hospedagem e gerenciamento de infraestrutura na nuvem. Com a AWS, implementei a criação de instâncias EC2 para garantir alta disponibilidade e escalabilidade. Além disso, utilizei o S3 para armazenar recursos, como imagens, de forma econômica e confiável. Através do Elastic Beanstalk, automatizei o deploy e atualização de aplicações baseadas em métricas. A integração com o CodeCommit permitiu gerenciar repositórios de código de forma eficiente.",
    "Jest": "Como parte integrante das minhas práticas de desenvolvimento, o Jest foi a escolha principal para implementar testes unitários em meus projetos. Através do Jest, criei testes automatizados que garantiram a qualidade do código e a estabilidade das aplicações.",
    "GraphQL": "A utilização do GraphQL com o Apollo Client trouxe benefícios significativos para as aplicações. Através do GraphQL, consumi endpoints personalizados, obtendo somente os dados necessários para cada componente, o que evitou o carregamento de informações desnecessárias e melhorou significativamente a performance. Essa abordagem foi especialmente relevante em projetos com múltiplas fontes de dados.",
    "OliRole": "Desenvolvedor Full-Stack",
    "OliFirstResponsabilities": "Desenvolvimento/ Gerenciamento/ Deploy de Webapp (React / Next / Typescript / GraphQL / AWS server)",
    "OliSecondResponsabilities": "Desenvolvimento/ Gerenciamento/ Deploy de SDK (React / Websockets / AWS server)",
    "OliDate": "Nov 2021 - Mai 2023",
    "AiqRole": "Desenvolvedor FrontEnd",
    "AiqFirstResponsabilities": "Desenvolvimento/ Gerenciamento de WebApp (Vue.js/ React js)",
    "AiqSecondResponsabilities": "Teste Unitário (Jest)",
    "AiqDate": "Mai 2021 - Nov 2023",
    "MoodarRole": "Engenheiro de Software",
    "MoodarFirstResponsabilities": "Desenvolvimento/ Gerenciamento/ Deploy de aplicativos e webapps (React js/React Native)",
    "MoodarSecondResponsabilities": "Desenvolvimento/ Gerenciamento/ Deploy de servidores (Python com framework Django) e AWS Elastic Beanstalk",
    "MoodarThirdResponsabilities": "Cloud Functions e Realtime DB (Firebase)",
    "MoodarFourthResponsabilities": "Testes e2e (Cypress/Detox)",
    "MoodarDate": "Ago 2019 - Mai 2021",
    "SeedRole": "Analista de Projeto",
    "SeedFirstResponsabilities": "Desenvolvimento de WebApps (React js/ Node)",
    "SeedSecondResponsabilities": "Teste Unitário (Jest)",
    "SeedDate": "Jul 2019 - Jan 2020",
    "MbRole": "Desenvolvedor FrontEnd",
    "MbFirstResponsabilities": "Desenvolvimento de WebApps (React js/ Next/ Typescript)",
    "MbSecondResponsabilities": "Teste Unitário/ e2e (Jest/ Cypress)",
    "MbDate": "Ago 2023 - Atual"
  }
}
